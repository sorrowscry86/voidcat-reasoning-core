{
  "id": "de7779a5-6ac8-488f-9dcc-bd6cf5926885",
  "title": "FastMCP Launch Script",
  "details": "#!/usr/bin/env python3\n\"\"\"\nVoidCat FastMCP Server Python Launcher\n=====================================\n\nThis launcher ensures proper environment setup and dependency loading\nfor the VoidCat FastMCP server when running from any environment.\n\"\"\"\n\nimport asyncio\nimport os\nimport sys\nfrom pathlib import Path\n\n# Fix Windows asyncio transport issues (Python 3.8+ ProactorEventLoop problems)\nif sys.platform == \"win32\":\n    import asyncio\n    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())\n\n\ndef setup_environment():\n    \"\"\"Set up the Python environment and verify dependencies.\"\"\"\n    # Set the working directory to the project root\n    project_root = Path(__file__).parent\n    os.chdir(project_root)\n\n    # Add project root to Python path\n    sys.path.insert(0, str(project_root))\n\n    # Set environment variables\n    os.environ[\"PYTHONPATH\"] = str(project_root)\n    os.environ[\"VOIDCAT_FASTMCP_MODE\"] = \"true\"\n    os.environ[\"VOIDCAT_DEBUG\"] = \"false\"  # Disable debug by default\n\n    print(f\"[FastMCP-Launcher] Working directory: {os.getcwd()}\", file=sys.stderr)\n    print(f\"[FastMCP-Launcher] Python path: {sys.path[0]}\", file=sys.stderr)\n    print(f\"[FastMCP-Launcher] Python executable: {sys.executable}\", file=sys.stderr)\n    print(f\"[FastMCP-Launcher] Python version: {sys.version}\", file=sys.stderr)\n\n\ndef check_dependencies():\n    \"\"\"Check if all required dependencies are available.\"\"\"\n    required_modules = [\n        \"fastapi\",\n        \"uvicorn\",\n        \"pydantic\",\n        \"httpx\",\n        \"sklearn\",\n        \"numpy\",\n        \"dotenv\"\n    ]\n\n    missing = []\n    for module in required_modules:\n        try:\n            if module == \"sklearn\":\n                __import__(\"sklearn\")\n            elif module == \"dotenv\":\n                __import__(\"dotenv\")\n            else:\n                __import__(module)\n            print(f\"[FastMCP-Launcher] ✓ {module} available\", file=sys.stderr)\n        except ImportError:\n            missing.append(module)\n            print(f\"[FastMCP-Launcher] ✗ {module} missing\", file=sys.stderr)\n\n    if missing:\n        print(\n            f\"[FastMCP-Launcher] Missing dependencies: {', '.join(missing)}\",\n            file=sys.stderr\n        )\n        \n        # Ask if we should install missing dependencies\n        if input(\"Install missing dependencies? (y/n): \").lower() == \"y\":\n            print(\"[FastMCP-Launcher] Installing missing dependencies...\", file=sys.stderr)\n            \n            import subprocess\n            for module in missing:\n                print(f\"[FastMCP-Launcher] Installing {module}...\", file=sys.stderr)\n                subprocess.check_call(\n                    [sys.executable, \"-m\", \"pip\", \"install\", module]\n                )\n                return False\n        \n        # Re-check after installation\n        print(\"[FastMCP-Launcher] Re-checking dependencies...\", file=sys.stderr)\n        return check_dependencies()\n    \n    return True\n\n\ndef main():\n    \"\"\"Main launcher function.\"\"\"\n    try:\n        print(\n            \"[FastMCP-Launcher] Starting VoidCat FastMCP Server...\",\n            file=sys.stderr,\n        )\n\n        # Setup environment\n        setup_environment()\n\n        # Check dependencies\n        if not check_dependencies():\n            print(\"[FastMCP-Launcher] Dependency check failed\", file=sys.stderr)\n            return 1\n\n        print(\"[FastMCP-Launcher] Environment setup complete\", file=sys.stderr)\n        \n        # Import and run the FastMCP server\n        try:\n            import asyncio\n            from fastmcp import run_fastmcp_server\n            \n            # Run the FastMCP server\n            run_fastmcp_server()\n            \n        except ImportError as e:\n            print(f\"[FastMCP-Launcher] Error importing FastMCP: {e}\", file=sys.stderr)\n            return 1\n        \n    except Exception as e:\n        print(f\"[FastMCP-Launcher] FATAL ERROR: {e}\", file=sys.stderr)\n        import traceback\n        traceback.print_exc(file=sys.stderr)\n        return 1\n    \n    return 0\n\n\nif __name__ == \"__main__\":\n    sys.exit(main())",
  "category": "code",
  "dateCreated": "2025-07-27T10:38:29.873Z",
  "dateUpdated": "2025-07-27T10:38:29.873Z"
}