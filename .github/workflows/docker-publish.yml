name: 🐳 VoidCat Reasoning Engine - Container Publishing

on:
  push:
    branches: 
      - main
      - master
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
      - master

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: 🚀 Checkout Repository
      uses: actions/checkout@v4

    - name: 🛡️ Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔐 Login to GitHub Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 📊 Extract Metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: 🏗️ Build and Push Container Image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: 🧪 Test Container Image
      if: github.event_name == 'pull_request'
      run: |
        docker build -t test-image .
        docker run --rm -d --name test-container -p 8000:8000 test-image
        sleep 10
        curl -f http://localhost:8000/ || exit 1
        docker stop test-container

    - name: 📋 Generate Deployment Summary
      if: github.event_name != 'pull_request'
      run: |
        echo "## 🐳 VoidCat Reasoning Engine Deployment" >> $GITHUB_STEP_SUMMARY
        echo "### 📦 Published Images" >> $GITHUB_STEP_SUMMARY
        echo "- **Registry**: ${{ env.REGISTRY }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Repository**: ${{ env.IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Tags**: ${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
        echo "### 🚀 Quick Deploy" >> $GITHUB_STEP_SUMMARY
        echo '```bash' >> $GITHUB_STEP_SUMMARY
        echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
        echo "docker run -d --name voidcat-reasoning -p 8000:8000 --env-file .env ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-publish
    if: github.event_name != 'pull_request'
    
    steps:
    - name: 🚀 Checkout Repository
      uses: actions/checkout@v4
    
    - name: 🔍 Run Trivy Security Scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: 📊 Upload Trivy Scan Results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  deploy-notification:
    runs-on: ubuntu-latest
    needs: [build-and-publish, security-scan]
    if: github.event_name != 'pull_request' && success()
    
    steps:
    - name: 🎉 Deployment Success Notification
      run: |
        echo "🛡️ VoidCat Reasoning Engine successfully deployed!"
        echo "✅ Container published to GHCR"
        echo "✅ Security scan completed"
        echo "✅ Ready for production deployment"
        echo ""
        echo "🐳 Quick Start:"
        echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
        echo "docker run -d --name voidcat-reasoning -p 8000:8000 --env-file .env ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
